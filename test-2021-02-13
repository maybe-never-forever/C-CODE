#define _CRT_SECURE_NO_WARINGS 1
#include<stdio.h>
//
//int main()
//{
//	int a = 10;
//	int* p = &a;//指针变量——存放地址的变量——指针变量
//	return 0;
//}
//
//int main()
//{
//	//printf("%d\n", sizeof(char*));
//	//printf("%d\n", sizeof(short*));
//	//printf("%d\n", sizeof(int*));
//	//printf("%d\n", sizeof(double*));
//	int a = 0x11223344;
//	//int* pa = &a;//int* pa能够访问4个字节
//	//*pa = 0;
//	char* pc = &a;//指针类型决定了指针进行解引用操作时，能访问空间的大小//char* pc进行解引用操作时能够访问1个字节
//	//同理 double* p进行解引用操作时能够访问8个字节
//	*pc = 0;
//	//printf("%p\n", pa);
//	//printf("%p\n", pc);
//	return 0;
//}

////指针+-整数
//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	char* pc = &a;
//	printf("%p\n", pa);
//	printf("%p\n", pa+1);
//	printf("%p\n", pc);
//	printf("%p\n", pc+1);
//	return 0;
//}//指针类型决定了：指针走一步走多远（指针的步长）
////int* p;p+1-->4
////char* p;p+1-->1
////double* p;p+1-->8
//
//int main()
//{
//	int arr[10] = {0};
//	//int* p = arr;//数组名—首元素地址
//	char* p = arr;
//	int i = 0;
//	for (i = 0; i<10; i++)
//	{
//		*(p + i) = 1;
//	}
//	return 0;
//}

////野指针类型——指针未初始化
//int main()
//{
//	//int a;//局部变量不初始化，默认是随机值
//	int* p;//局部的指针变量,就被初始化随机值
//	*p = 20;
//	return 0;
//}
//
////野指针类型二——指针越界访问
//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 20; i++)
//	{
//		//当指针指向的范围超出数组的范围时，p就是野指针
//		*(p++) = i;
//	}
//	return 0;
//}
////野指针类型三，指针指向的空间释放
//
//int* test()
//{
//	int a = 10;
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}
//
//复习——野指针
//int main()
//{
//	//未初始化的指针变量
//	int* p;//局部变量不初始化，里面默认放的是一个随机值
//	*p = 20;//未初始化的指针变量非法访问内存
//	return 0;
//}

////数组越界导致的野指针问题
//int main()
//{
//	int a[10] = { 0 };
//	int i = 0;
//	int* p = a;
//	for (i = 0; i < +12; i++)
//	{
//		//*p = 1;
//		//p++;//越界访问的指针解引用——野指针
//		*p++ = i;
//	}
//	return 0;
//}
//	指针指向空间释放
//int* test()
//{
//	//int a = 10;//局部变量a进入{}创建
//	//return &a;//出{}销毁
//	static int arr[10] = { 0 };//如果是static变量，出{}不销毁，就可以返回其地址
//	return arr;
//}
//int main()
//{
//	int* p = test();
//	printf("%d\n", *p);
//	return 0;
////}
//int main()
//{
//	//int a = 10;
//	//int* pa = &a;
//	//int* p = NULL;//NULL-用来初始化指针的，给指针赋值
//	int a = 10;
//	int* pa = &a;
//	*pa = 20;
//	//
//	pa = NULL;
//	//*pa = 0;//会发生访问冲突
//	//if (pa != NULL)
//	//{
//	//	//使用指针，
//	//}
//}
//
//int main()
//{
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int* p = &arr[9];
//	/*for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *p);
//		p++;
//	}*/
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", *p);
//		p -= 2;
//	}
//	return 0;
//}
//
//#define N_values 5
//int main()
//{
//	float values[N_values];
//	float* vp;
//	for (vp = &values[0]; vp < &values[N_values];)
//	{
//		*vp++ = 0;
//	}
//	return 0;
//}
//int main()
//{
//	char ch[5] = { 0 };
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	printf("%d\n",&arr[0] - &arr[9]);//大指针-小指针=中间元素个数
//	//printf("%d\n", &arr[9] - &ch[0]);//err
//	return 0;
//}
//
//int my_strlen(char* str)
//{
//	char* start = str;
//	char* end = str;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//int main()
//{
//
//	//strlen -求字符串长度的
//	//递归 - 模拟实现了strlen -计数器的方式1，递归方式2
//	//
//	char arr[] = "night study!";
//
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//	return 0;
//}

//指针的关系运算
#define N_values 5
int main()
{
	float values[N_values];
	float* vp;
	for (vp = &values[N_values]; vp > &values[0];)
	{
		*--vp = 0;
	}
	//for (vp = &values[N_values - 1]; vp >= &values[0]; vp--)
	//{
	//	*vp = 0;
	//}//应该避免这么写
	return 0;
}//标准规定，允许指向数组元素的指针与指向数组最后一个元素后面那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较
