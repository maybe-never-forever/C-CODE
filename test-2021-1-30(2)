#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<math.h>

//
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//	//strlen
//	//内存操作函数——memset
////}
//
//int main()
//{
//	char arr1[] = "night study";
//	char arr2[20] = "################";
//	strcpy(arr2, arr1);//只拷贝覆盖有的内容，不会改变arr2的大小，\0也会被拷贝
//	printf("%s\n", arr2);
//	//strcpy——string copy——与字符串拷贝相关
//	//strlen——string length——字符串长度相关的
//	return 0;
//}

//memset
//memory-内存   set-设置
////
//int main()
//{
//	char arr[] = "hello world";
//	memset(arr, '*', 5);//中间本应放int类型的参数；但是'*'在内存中存放的也是ASCII码值也是int
//	printf("%s\n", arr);
//	return 0;
//}
//
//int get_max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = get_max(a, b);
//	printf("max = %d\n", max);
//	max = get_max(100, 300);
//	printf("max = %d\n", max);
//	return 0;
//}

////写一个函数交换两个整形变量的内容
//void Swap(int x, int y)//void表示没有返回值
//{
//	int tmp = 0;
//	tmp = x;
//	x = y;
//	y = tmp;
//}//无法交换
//
//当实参传给形参的时候
//形参其实是实参的一份临时拷贝
//对形参的修改是不会改变实参的
//
//void Swap2(int* pa, int* pb)
//{
//	int tmp = 0;
//	tmp = *pa;
//	*pa = *pb;
//	*pb = tmp;
//}//正确的设计方法，必须使用指针；不然函数内部创建的变量和输入值没有更多的联系
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	/*int tmp = 0;*/
//	printf("a=%d b=%d\n", a, b);
//  //调用Swap函数--传值调用
//	//Swap(a, b);
//  //调用Swap2函数--传址调用
//	Swap2(&a, &b);
//	//交换内容
//	/*tmp = a;
//	a = b;
//	b = tmp;*/
//	printf("a=%d b=%d\n", a, b);
//	return 0;
//}
//
//int main()
//{
//	int a = 10;
//	int* pa = &a;//pa指针变量
//	*pa = 20;//解引用操作
//	printf("a= %d\n", a);
//}

//练习——写一个函数判断一个数是不是素数
//前置练习——打印100-200之间的素数

//是素数返回1，不是素数返回0
//int is_prime(int n)//我的函数
//{
//	int a = 0;
//	for (a = 2; a < sqrt(n);a++)
//	{
//		if (n % a == 0)
//			break;//也可以用 return 0;
//	}
//	if (a >sqrt (n))
//		return 1;
//	else
//		return a;
//}
//
//int is_prime(int n)
//{
//	//2->n-1
//	int j = 0;
//	for (j = 2; j < sqrt(n); j++)
//	{
//		if (n % j == 0)
//			return 0;//return 0会直接结束函数；效力比break强
//	}
//	return 1;
//}
//打印100-200之间的素数
//int main()
//{
//	int i = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		//判断i是否是素数
//		if (is_prime(i) == 1)
//			printf("%d ", i);
//	}
//
//	return 0;
//}
//
//判断一个数是否为素数
//
//int main()
//{
//	int i = 0;
//	scanf("%d", &i);
//	if (is_prime(i) == 1)
//		printf("%d是素数", i);
//	else
//		printf("%d不是素数,其公约数之一是%d", i,is_prime(i));
//	return 0;
//}

////打印1000-2000之间的闰年
//int is_leap_year(int y)
//{
//	if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
//		return 1;
//	else
//		return 0;
//}
//int main()
//{
//	int year = 0;
//	for (year = 1000; year <= 2000; year++)
//		//判断year是否是闰年
//	{
//		if (is_leap_year(year) == 1)
//			printf("%d是闰年\n",year);
//	}
//	return 0;
//}
//
////！！！！！！！！！！！！很重要！！！！！！！！！！！！！
//                      //本质上arr是一个指针
//int binary_search(int arr[],int k,int sz)
//{
//	//算法的正式实现
//	int left = 0;
//	int right = 0;
//	right = sz - 1;
//	
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;//计算mid值必须在循环内部进行
//		if (k > arr[mid])
//			left = mid + 1;
//		else if (k < arr[mid])
//			right = mid - 1;
//		else
//		{
//			return mid;
//		}
//	}
//		return -1;
//}//在函数内部求实参的元素个数是做不到的，只能是老老实实在外面求了传进去
//
//int main()
//{
//	//二分查找
//	//在一个有序数组中查找具体的某个数
//	//如果找到了返回该数的下标，如果找不到则返回-1
//	//一个好习惯，先把这个函数怎么用，然后再去想这个函数怎么实现
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	                        //传递过去的是arr首元素的地址
//	int ret = binary_search(arr, k,sz);
//	if (ret == -1)
//		printf("找不到指定的数字。");
//	else
//	{
//		printf("找到了，其下标是%d", ret);
//	}
//	return 0;
//}
//
//void Add(int* p)
//{
//	(*p)++;//++的优先级比较高，*p必须用()
//}
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("num=%d\n", num);
//	Add(&num);
//	printf("num=%d\n", num); 
//	Add(&num);
//	printf("num=%d\n", num);
//	return 0;
//}
//
//int main()
//{
//	int len = 0;
//	//1
//	len = strlen("abc");
//	printf("%d\n", len);
//	//2
//	printf("%d\n", strlen("abc"));
//	return 0;
//}
//
//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));
//	return 0;
//}


//函数声明
//int Add(int x, int y);

#include "add.h"
int main()
{
	int a = 10;
	int b = 20;
	int sum = 0;
	//函数的调用
	sum = Add(a, b);
	printf("%d\n", sum);
	return 0;
}
