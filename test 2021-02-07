#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//
//int main()
//{
//	//int a = 5 / 2;//商2余1
//	double a = 5.0 / 2;//要得到小数，至少除数和被除数中要有一个小数
//	int b = 5 % 2;//'%'两端必须是整数
//	printf("a = %lf\n", a);
//	printf("b = %d", b);
//	return 0;
//}
//
//int main()
//{
//	int a = 10;
//	//>>—— 右移操作符，移动二进制位
//	//1010
//	int b = a >> 2;
//	printf("b = %d", b);
//}
//
//int main()
//{
//	int a = -1;
//	//整数的二进制表示有：原码、反码和补码
//	//存到内存中的是补码
//	//正整数的三种表示形式相同
//	//-1—>10000000000000000000000000000001（原码）
//	//-1—>11111111111111111111111111111110 (反码)
//	//-1—>11111111111111111111111111111111 (补码)
//	//右移有/2的效果
//	int b = a >> 2;
//	printf("b = %d", b);
//}
//
//int main()
//{
//	int a = 5;
//	int b = a << 1;
//	//00000000000000000000000000000101 左移:左边丢弃，右边补0
//	//左移有*2的效果
//	printf("%d", b);
//	return 0;
//}

//int main()
//{
//	//&—按2进制位 与
//	//int a = 3;
//	//int b = 5;
//	//int c = a & b;
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000001
//	//printf("%d\n", c);
//	//|-按二进制位或
//	//int a = 3;
//	//int b = 5;
//	//int c = a | b;
//	//printf("%d\n",c);
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000111
//	//按照二进制位异或
//	//对应二进制位相同为0，相异为1
//	int a = 3;
//	int b = 5;
//	int c = a^b;
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000110
//	printf("%d\n",c);
//	return 0;
//}

//交换两个变量，要求不能使用第三个变量
//传统方法
//int main()
//{
//	int a = 3;
//	int b = 5;
//	int tmp = 0;
//	printf("before: a=%d b=%d\n", a, b);
//	//tmp = a;
//	//a = b;
//	//b = tmp;
//
//	//加减法-a+b超过整型的最大值时，有可能溢出
//	/*a = a + b;
//	b = a - b;
//	a = a - b;*/
//
//	//异或的方法
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("after: a=%d b=%d", a, b);
//	return 0;
//}

////编写代码求一个整数存储在内存中二进制中1的个数
//int main()
//{
//	int num = 0;
//	int count = 0;
//	scanf("%d", &num);//-1
//	int i = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (1 == ((num >>i)& 1))
//			count++;
//	}
//	printf("%d\n", count);
//					  
//	//32bit
//	//num&1==1
//	//00000000000000000000000000000011
//	//00000000000000000000000000000001
//	//00000000000000000000000000000001
//	//统计num的补码中有几个1
//	//
//
//	//while (num)//只能计算正数，有点问题
//	//{
//	//	if (num % 2 == 1)
//	//	{
//	//		count++;	
//	//	}
//	//	num = num / 2;;
//	//}
//	//printf("%d\n", count);
//	return 0;
//}
//
//int main()
//{
//	int a = 0;
//	int b = 10;
//	int c = 20;
//	a = b = c + 1;
//	printf("%d %d %d", a,b,c);
//	return 0;
//}

//复合赋值符
//int main()
//{
//	int a = 2;
//	a += 2;//复合赋值符
//	a -= 2;
//	a *= 2;
//	a /= 2;
//	a %= 2;
//	printf("%d\n", a);
//	return 0;
//}

////单目操作符
////a+b;+双目操作符
////单目操作符：只有一个操作数
//int main()
//{
//	int a = 0;
//	if (a)
//	{
//		printf("hehe\n");
//	}
//	if (!a)
//	{
//		printf("呵呵\n");
//	}
//
//	//printf("%d\n", !a);
//	return 0;
//}
//
//int main()
//{
//	int a = -5;
//	a = -a;
//	printf("%d\n", a);
//	return 0;
//}
//
//int main()
//{
//	int a = 10;
//	int* p = &a;//取地址操作符
//	*p = 20;//解引用操作符
//	return 0;
//}
int main()
{
	int a = 10;
	char c = 'r';
	char* p = &c;
	int arr[10] = {0};
	//sizeof 计算
	printf("%d\n",sizeof(a));//4
	printf("%d\n", sizeof(int));//sizeof 后面加类型时是不能省略()的
	printf("%d\n", sizeof(c));//1
	printf("%d\n", sizeof(char));
	printf("%d\n", sizeof(p));//4or8——4（32）
	printf("%d\n", sizeof(char*));
	printf("%d\n", sizeof(arr));//40
	printf("%d\n", sizeof(int [5]));//对于数组来说，去掉名字就是类型
	return 0;
}
