
////统计二进制中1的个数
//#include<stdio.h>
//#include<stdlib.h>
////
////int count_bit_one(int n)//my
////{
////	int i = 0;
////	int count = 0;
////	for (i = 0; i < 32; i++)
////	{
////		if (((n >> i) & 1) == 1)//&&逻辑与;‘&’按位与
////		{
////			count++;
////		}
////	}
////	return count;
////}
////
////int count_bit_one(unsigned int n)
////{
////	int count = 0;
////	while (n)
////	{
////		if (n % 2 == 1)
////		{
////			count++;
////		}
////		n = n / 2;
////	}
////	return count;
////}
//
////算法3——最精简算法
//int count_bit_one(int n)
//{
//	int count = 0;
//	while (n)
//	{
//		n = n & (n - 1);
//		count++;
//	}
//	return count;
//}
////n=n&(n-1)
////n
////13
////1101 n
////1100 n-1
////1100 n
////1011 n-1
////1000 n
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	//写一个函数求a的二进制（补码）表示中有几个1
//	int count=count_bit_one(a);
//	//1231
//	//13=8+4+1
//	//1101
//	printf("count = %d\n", count);
//	//system("pause");//system库函数-执行系统命令-pause暂停可以在不改子系统的时候让系统停下来
//	return 0;
//}

////求二进制中不同位的个数
//#include<stdio.h>
//int get_different_count(int m, int n)
//{
//	int a = 0;
//	int count = 0;
//	a = m ^ n;
//	while (a)
//	{
//		a = a & (a - 1);
//		count++;
//	}
//	return count;
//}
//int main()
//{
//	int m = 0;
//	int n = 0;
//	scanf("%d %d", &m, &n);
//	get_different_count(m, n);
//	printf("count = %d", get_different_count(m, n));
//	return 0;
//}
//
////打印二进制的奇数位和偶数位
//#include<stdio.h>
//void Print(m)
//{
//	int i = 0;
//	printf("奇数位:");
//	for (i = 30; i >= 0; i -= 2)
//	{
//		//打印奇数位
//		printf("%d ",(m >> i) & 1);
//	}
//	printf("\n");
//	printf("偶数位:");
//	for (i = 31; i >= 0; i -= 2)
//	{
//		//打印偶数位
//		printf("%d ", (m >> i) & 1);
//	}
//	printf("\n");
//}
//int main()
//{
//	int m = 0;
//	scanf("%d", &m);
//	Print(m);
//	return 0;
//}

//复习题目：交换两个变量（不创建临时变量）——使用异或的方法

//
////用指针打印数组内容
//print(int* p, int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *(p + i));
//	}
//}
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	print(arr,sz);
//	return 0;
//}
