
////数组作为函数参数的类型
//void bubble_sort(int arr[],int sz)
//{
//	int i = 0;
//	//确定冒泡排序的趟数
//	for (i = 0; i < sz - 1;i++)
//	{
//		int flag = 0;//先假设这一趟要排序的数据已经有序
//		//每一趟冒泡排序
//		int j = 0;
//		for (j = 0; j <sz-1-i; j++)
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int tmp = 0;
//				tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//				flag = 0;//本躺的冒泡排序其实不完全有序
//			}
//		}
//		if (flag == 1)
//		{
//			break;//在外层没有for或者while，switch这样的循环时，是不能贸然在if语句中使用break的
//		}
//	}
//}
//
//int main()
//{
//	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//对arr进行排序，排成升序
//	bubble_sort(arr, sz);//冒泡排序函数,arr是数组，对arr进行传参的时候，传的是首元素地址&arr[0]
//	//利用sizeof求元素数量必须在函数外部进行，然后传给函数
//	for (i = 0; i < sz; i++)
//	{		printf("%d ", arr[i]);
//}
//	return 0;
//}
//
//int main()
//{
//	if (1)
//		break;//err
//	return 0;
//}
//
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9 };
//	//int sz = sizeof(arr) / sizeof(arr[0]);
//	printf("%p\n", arr);
//	printf("%p\n", arr+1);
//
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr[0]+1);
//
//	printf("%p\n", &arr);//虽然显示的值和首元素地址一样，但是实际上代表的是整个数组的地址
//	printf("%p\n", &arr+1);
//	/*printf("%p\n", arr);
//	printf("%p\n", &arr[0]);
//	printf("%d\n", *arr);*///对arr数组名进行解引用，看看是不是首元素值1
//	//结论：数组名是首元素地址，但是有例外
//	//1.sizeof(数组名)-数组名代表整个数组，sizeof(数组名)计算的是整个数组的大小，单位是字节
//	//2.&数组名，数组名代表整个数组，&数组名，取出的是整个数组的地址
//	return 0;
//}

#include"game.h"
//数组的应用——三子棋
//棋盘初始样貌展示
//   |   |   
//---|---|---
//   |   |   
//---|---|---
//   |   |   

void game()//游戏的算法实现
{
	//使用数组存放玩家和电脑走出的棋盘信息
	char board[ROW][COL] = { 0 };//希望数组的内容全部空格
	//初始化棋盘
	Initboard(board,ROW,COL);
	//打印棋盘
	DisplayBoard(board,ROW,COL);
}
void menu()
{
	printf("**************************\n");
	printf("****1.play   0.exit*******\n");
	printf("**************************\n");
}
void test()
{
	int input = 0;
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，请重新开始选择\n");
			break;
		}
	} while (input);
}

int main()
{
	test();
	return 0;
}


//game.h
#pragma once
#include<stdio.h>
#define ROW 10
#define COL 10
//函数的声明
void Initboard(char board[ROW][COL], int row, int col);
//声明
void DisplayBoard(char board[ROW][COL], int row, int col);

//game.c
#include "game.h"


void Initboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
			board[i][j] = ' ';
	}
}
//void DisplayBoard(char board[ROW][COL], int row, int col)
//{
//	int i = 0;
//	for (i = 0; i < row; i++)
//	{
//		//1.打印一行的数据
//		printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
//		//2.打印分割行
//		if (i < row - 1)
//		printf("---|---|---\n");//这里写死了列数，其实是比较不合适的
//	}
//}
//优化方案

void DisplayBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		//1.打印一行的数据
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		//2.打印分割行
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if(j<col-1)
				printf("|");
			}
		}
		printf("\n");
	}
}
