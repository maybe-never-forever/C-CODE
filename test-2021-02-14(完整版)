#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//作业讲解
//return只能返回一个值
//函数的参数不宜过多
//尽量少使用全局变量
//
//#include<stdio.h>
//int main()
//{
//	char str[] = "hello night study!";
//	printf("%d %d\n", sizeof(str), strlen(str));
//	return 0;
//}

//冒泡排序操作回顾

////编程题——创建一个数组，完成对其操作
//#include<stdio.h>
//void Init(int arr[], int sz)//传数组实参的时候，函数必须写arr{}
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		arr[i] = 0;
//	}
//}
//void Print(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//		
//	}
//	printf("\n");
//}
//void Reverse(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	int tmp = 0;
//	while (left < right)
//	{
//		tmp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = tmp;
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	Print(arr, sz);
//	Reverse(arr, sz);
//	//Init(arr,sz);//把数组初始化成全0
//	Print(arr, sz);
//	return 0;
//}
//
////数组交换 编程
//#include<stdio.h>
//void Switch(int arr1[], int arr2[],int sz)
//{
//	int tmp = 0;
//	int i = 0;
//	for (i = 0; i<sz; i++)
//	{
//		tmp = arr1[i];
//		arr1[i] = arr2[i];
//		arr2[i] = tmp;
//	}
//}
//void Print(int arr[],int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//int main()
//{
//	int arr1[] = { 1,3,5,7,9 };
//	int arr2[] = { 2,4,6,8,10 };
//	int sz = sizeof(arr1) / sizeof(arr1[0]);
//	Switch(arr1, arr2,sz);
//	Print(arr1,sz);
//	Print(arr2,sz);
//}
//
//#include<stdio.h>
//int main()
//{
//	int arr[] = { 1,2,3,4,5 };
//	short* p = (short*)arr;
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		*(p + i)=0;
//	}
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//#include<stdio.h>
//int main()
//{
//	int a = 0x11223344;//a在内存块中存放是倒着存放的
//	char* pc = (char*)&a;
//	*pc = 0;
//	printf("%x\n", a);
//	return 0;
//}
//
//#include<stdio.h>
//int i;//局部变量不初始化-随机值，全局变量不初始化-是0
//int main()
//{
//	i--;
//	//-1
//	//10000000000000000000000000000001
//	//11111111111111111111111111111110
//	//11111111111111111111111111111111
//	//
//	if (i > sizeof(i))//sizeof()-计算变量/类型所占内存的大小>=0 无符号数
//	{
//		printf(">\n");
//	}
//	else
//	{
//		printf("<\n");
//	}
//	return 0;
//}
//
//#include<stdio.h>
//int main()
//{
//	int a, b, c;
//	a = 5;
//	c = ++a;//c = 6;a = 6
//	b = ++c, c++, ++a, a++;//c=8,b=7,a=8;逗号表达式的优先级非常低
//	b += a++ + c;//b=23 a=9
//	printf("a =%d b = %d c = %d\n", a, b, c);
//	return 0;
//}

////统计二进制中1的个数
//#include<stdio.h>
//#include<stdlib.h>
////
////int count_bit_one(int n)//my
////{
////	int i = 0;
////	int count = 0;
////	for (i = 0; i < 32; i++)
////	{
////		if (((n >> i) & 1) == 1)//&&逻辑与;‘&’按位与
////		{
////			count++;
////		}
////	}
////	return count;
////}
////
////int count_bit_one(unsigned int n)
////{
////	int count = 0;
////	while (n)
////	{
////		if (n % 2 == 1)
////		{
////			count++;
////		}
////		n = n / 2;
////	}
////	return count;
////}
//
////算法3——最精简算法
//int count_bit_one(int n)
//{
//	int count = 0;
//	while (n)
//	{
//		n = n & (n - 1);
//		count++;
//	}
//	return count;
//}
////n=n&(n-1)
////n
////13
////1101 n
////1100 n-1
////1100 n
////1011 n-1
////1000 n
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	//写一个函数求a的二进制（补码）表示中有几个1
//	int count=count_bit_one(a);
//	//1231
//	//13=8+4+1
//	//1101
//	printf("count = %d\n", count);
//	//system("pause");//system库函数-执行系统命令-pause暂停可以在不改子系统的时候让系统停下来
//	return 0;
//}

////求二进制中不同位的个数
//#include<stdio.h>
//int get_different_count(int m, int n)
//{
//	int a = 0;
//	int count = 0;
//	a = m ^ n;
//	while (a)
//	{
//		a = a & (a - 1);
//		count++;
//	}
//	return count;
//}
//int main()
//{
//	int m = 0;
//	int n = 0;
//	scanf("%d %d", &m, &n);
//	get_different_count(m, n);
//	printf("count = %d", get_different_count(m, n));
//	return 0;
//}
//
////打印二进制的奇数位和偶数位
//#include<stdio.h>
//void Print(m)
//{
//	int i = 0;
//	printf("奇数位:");
//	for (i = 30; i >= 0; i -= 2)
//	{
//		//打印奇数位
//		printf("%d ",(m >> i) & 1);
//	}
//	printf("\n");
//	printf("偶数位:");
//	for (i = 31; i >= 0; i -= 2)
//	{
//		//打印偶数位
//		printf("%d ", (m >> i) & 1);
//	}
//	printf("\n");
//}
//int main()
//{
//	int m = 0;
//	scanf("%d", &m);
//	Print(m);
//	return 0;
//}

//复习题目：交换两个变量（不创建临时变量）——使用异或的方法

//
////用指针打印数组内容
//print(int* p, int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *(p + i));
//	}
//}
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	print(arr,sz);
//	return 0;
//}

////递归课后作业
//int Fun(int n)
//{
//	if (n == 5)
//		return 2;
//	else
//		return 2 * Fun(n + 1);
//}
//int main()
//{
//	int a = 2;
//	int b= Fun(a);
//	printf("%d", b);
//}

////输出乘法口诀表
//void print_table(int n)
//{
//	int i = 1;
//	for (i = 1; i <= n; i++)
//	{
//		int j = 0;
//		for (j = 1; j <= i; j++)
//			printf("%d * %d = %-3d  ", i, j, i * j);//使用-3d来控制最后结果的位数左对齐
//		printf("\n");
//	}
//}
//int main()
//{
//	int n = 0;
//	scanf("%d" ,& n);
//	print_table(n);
//	return 0;
//}

////字符串的逆序
////将字符串的内容反向排列
//#include<string.h>
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
////
////void reverse_string(char arr[])
////{
////	int left = 0;
////	int right = my_strlen(arr)-1;
////	while (left < right)
////	{
////		int tmp = arr[left];
////		arr[left] = arr[right];
////		arr[right] = tmp;
////		left++;
////		right--;
////}
//
////把abcdef的逆序转换成
////1.a和f的交换
////2.逆序 reverse_string("b c d e")
//void reverse_string(char arr[])//递归的方法
//{
//	char tmp = arr[0];
//	int len = my_strlen(arr);
//	arr[0] = arr[len - 1];
//	arr[len - 1] = '\0';
//	if(my_strlen(arr+1)>=2)//必须有一个逐渐逼近的条件
//	reverse_string(arr + 1);
//	
//	arr[len - 1] = tmp;
//}
//
//int main()
//{
//	char arr[] = "abcdefg";
//	reverse_string(arr);
//	printf("%s\n",arr );
//	return 0;
//}
//
////写一个递归函数DigitSum(n),输入一个非负整数，返回组成它的数字之和
//int DigitSum(unsigned int num)
//{
//	if  (num >9)
//	{
//		return DigitSum(num/10)+num%10;
//	}
//	else return num;
//}
//int main()
//{
//	unsigned int num = 0;
//	scanf("%d", &num);//1729
//	//172+9
//	int ret = DigitSum(num);
//	printf("%d ", ret);
//	return 0;
//}

//编写一个函数实现n的k次方
double Pow(int n, int k)
{
	if (k == 0)
		return 1;
	else if(k<0)
	{
		return (1.0 / Pow(n, -k));
	}
	else
		return n * Pow(n, k - 1);
}
int main()
{
	int n = 0;
	int k = 0;
	scanf("%d %d", &n, &k);
	double ret = Pow(n,k);
	printf("ret = %lf", ret);
	return 0;
}
