//int main()
//{
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		if (i == 5)//如果不是（i==5）;而是(i=5)赋值5的话，此地会产生死循环
//			printf("haha\n");
//		printf("hehe\n");
//	}
//	return 0;
////}
//
//
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	//10次循环
//	//10次打印
//	//10个元素
//	for (i = 0; i < 10; i++)//注意数组的下标是从0开始，此处最好采用前闭后开的写法
//		printf("%d", arr[i]);
//	return 0;
//}
//
//int main()
//{
//	for (;;)//省略for循环的初始化、判断、调整部分;代码一旦省略，就代表着跳过该部分
//	{
//		printf("hehe\n");
//	}
//	return 0;
//}
//
//int main()
//{
//	int i = 0;
//	int j = 0;
//	//for(i=0;i<10;i++)
//	for (; i < 10; i++)//省略i=0，跳过初始化
//	{
//		//for(j=0;j<10;j++)
//		for (; j < 10; j++)//省略j=0，每次循环j不变
//		{
//			printf("hehe\n");
//		}
//	}
//	//10*10 = 100
//	//省略时，打印10次
//	return 0;
//}

//for循环变种2
//int main()
//{
//	int x, y;
//	for (x = 0, y = 0; x < 2 &&/*逻辑与*/ y < 5; ++x, y++)
//	{
//		printf("hehe\n");
//	}
//	return 0;
//}
//
//int main()
//{
//	int i = 0;
//	int k = 0;
//	for (i = 0, k = 0; k = 0; i++, k++)//判断时采用了赋值符号，表达式结果为k值恒为0；不进入循环，所以循环0次
//	{
//		k++;
//		printf("hehe\n");
//	}
//	return 0;
//}
//
//int main()
//{
//	int i = 1;
//	//输出1-10
//	do
//	{
//		if (i == 5)
//			//break;
//			//continue;   调整被忽略，陷入死循环
//		printf("%d\n", i);
//		i++;
//	} while (i <= 10);//判断真值时，循环执行语句
//	return 0;
//}


//练习：写个代码计算n的阶乘
//int main()//个人代码
//{
//	int a = 0;
//	int i = 0;
//	int ret = 1;
//	printf("n = ");
//	scanf("%d", &a);
//	for (i = 1; i <= a; i++)
//		ret = ret * i;
//	printf("ret = %d\n", ret);
//	return 0;
//}

////教学代码（标准答案）
//int main()
//{
//	int i = 0;
//	int n = 0;
//	int ret = 1;
//	scanf("%d", &n);
//	for (i = 1; i <= n; i++)
//	{
//		ret = ret * i;
//	}
//	printf("ret =%d\n", ret);
//	return 0;
//}//好像跟我的差不多的说，注意这里不考虑溢出的情况

//练习2;计算1！+2！+3！...+n!的加和
//int main()//个人代码
//{
//	int a = 0;
//	int i = 1;
//	int sum = 0;
//	int ret = 1;
//	printf("n =");
//	scanf("%d", &a);
//	for (i = 1; i <= a; i++)
//	{
//		ret = ret * i;
//		sum = sum + ret;
//	}
//	printf("sum = %d", sum);
//	return 0;
//}


//参考答案：计算1-10的阶乘和
//int main()//初始方案
//{
//	int i = 0;
//	int n = 0;
//	int ret = 1;
//	int sum = 0;
//	//1!+2!+3!=9
//	for (n = 1; n <= 10; n++)
//	{
//		ret = 1;//注意这里必须将ret初始化，不然出误
//		for (i = 1; i <= n; i++)
//		{
//			ret = ret * i;
//		}
//		sum = sum + ret;
//	}
//	printf("%d\n", sum);
//	return 0;
//}我的个人代码竟然是优化方案，惊

int main()//低效的办法
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 17;
	//写一个代码，在arr数组（有序的）中找到7
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 0; i < sz; i++)
	{
		if (k == arr[i])
		{
			printf("找到了，下标是%d\n", i);
			break;
		}
		
	}
	if (i == sz)
			printf("找不到");
	return 0;
}

//高效的方法：
//思路：例如：买了一双鞋，猜价格
